스프링의 핵심 기능은 객체를 생성하고 초기화하는 것이다.
이와 관련된 기능은 ApplicationContext라는 인터페이스에 정의되어 있으며,
GenericXmlApplicationContext 클래스는 이 인터페이스를 알맞게 구현한 클래스 중 하나이다.(XML을 읽어와 객체 생성과 초기화를 수행)

GenericXmlApplicationContext : XML로부터 객체 설정 정보를 가져온다.
AnnotationConfigApplicationContext : 자바 애노테이션을 이용한 클래스로부터 객체 설정 정보를 가져온다.
GenricGroovyApplicationContext : 그루비 코드를 이용해 설정 정보를 가져온다

어떤 구현 클래스를 사용하든, 각 구현 클래스는 설정 정보로부터 빈이라고 불리는 객체를 생성하고 그 객체를 내부에 보관한다.

//1. 설정 정보를 이용해서 빈 객체를 생성한다.
GenericXmlApplicationContext ctx = new GenericXmlApplicationContext("classpath:applicationContext.xml");
//2. 빈 객체를 제공한다.
Greeter g = ctx.getBean("greeter", Greeter.class);

ApplicationContext(또는 BeanFactory)는 빈 객체의 생성, 초기화, 보관, 제거 등을 관리하는데, 이런 이유로
컨테이너라고도 부른다. 이 책에서는 스프링 컨터에너라고 표현된다.

*싱글톤 객체*
보통 스프링에서는 기본적으로 한 개의 bean태그에 대해 한 개의 빈 객체를 생성한다.
이를 싱글톤 범위라고하면 프로토타입 범위도 존재한다.